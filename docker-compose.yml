version: '3.8'

services:
  # Redis for caching and real-time data
  redis:
    image: redis:7-alpine
    container_name: sentimentflow-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - sentimentflow-network

  # PostgreSQL for historical data storage
  postgres:
    image: postgres:15-alpine
    container_name: sentimentflow-postgres
    environment:
      POSTGRES_DB: sentimentflow
      POSTGRES_USER: sentimentflow_user
      POSTGRES_PASSWORD: sentimentflow_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - sentimentflow-network

  # InfluxDB for time series data
  influxdb:
    image: influxdb:2.7-alpine
    container_name: sentimentflow-influxdb
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: sentimentflow123
      DOCKER_INFLUXDB_INIT_ORG: sentimentflow
      DOCKER_INFLUXDB_INIT_BUCKET: market_data
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: sentimentflow-token-123
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
    networks:
      - sentimentflow-network

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: sentimentflow-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - sentimentflow-network

  # Kafka for real-time data streaming
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: sentimentflow-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    networks:
      - sentimentflow-network

  # Main application
  sentimentflow-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sentimentflow-app
    depends_on:
      - redis
      - postgres
      - influxdb
      - kafka
    ports:
      - "8000:8000"  # FastAPI
      - "8501:8501"  # Streamlit dashboard
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://sentimentflow_user:sentimentflow_pass@postgres:5432/sentimentflow
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=sentimentflow-token-123
      - INFLUXDB_ORG=sentimentflow
      - INFLUXDB_BUCKET=market_data
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    volumes:
      - ./src:/app/src
      - ./models:/app/models
      - ./logs:/app/logs
    networks:
      - sentimentflow-network
    restart: unless-stopped

  # Celery worker for background tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sentimentflow-celery
    depends_on:
      - redis
      - postgres
      - kafka
    command: celery -A src.tasks.celery_app worker --loglevel=info
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://sentimentflow_user:sentimentflow_pass@postgres:5432/sentimentflow
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    volumes:
      - ./src:/app/src
      - ./models:/app/models
      - ./logs:/app/logs
    networks:
      - sentimentflow-network
    restart: unless-stopped

  # Celery beat for scheduled tasks
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sentimentflow-celery-beat
    depends_on:
      - redis
      - postgres
    command: celery -A src.tasks.celery_app beat --loglevel=info
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://sentimentflow_user:sentimentflow_pass@postgres:5432/sentimentflow
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
    networks:
      - sentimentflow-network
    restart: unless-stopped

  # Flower for Celery monitoring
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sentimentflow-flower
    depends_on:
      - redis
      - celery-worker
    command: celery -A src.tasks.celery_app flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - REDIS_URL=redis://redis:6379
    networks:
      - sentimentflow-network
    restart: unless-stopped

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: sentimentflow-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - sentimentflow-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.0.0
    container_name: sentimentflow-grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=sentimentflow123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - sentimentflow-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: sentimentflow-nginx
    depends_on:
      - sentimentflow-app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - sentimentflow-network
    restart: unless-stopped

volumes:
  redis_data:
  postgres_data:
  influxdb_data:
  prometheus_data:
  grafana_data:

networks:
  sentimentflow-network:
    driver: bridge